<%_ if (config.includeAtAliases) { _%>
import { relative, sep as pathSeparator } from 'node:path'
<%_ } _%>
import { fileURLToPath, URL } from 'node:url'

import { defineConfig, type UserConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import vueDevTools from 'vite-plugin-vue-devtools'
<%_ if (config.includeTailwind) { _%>
import tailwindcss from '@tailwindcss/vite'
<%_ } _%>

<%_ if (config.includeAtAliases) { _%>
const librarySrc = fileURLToPath(new URL('../<%- config.mainPackageDirName %>/src/', import.meta.url))
const playgroundSrc = fileURLToPath(new URL('./src/', import.meta.url))
<%_ } _%>

export default defineConfig(({ mode }): UserConfig => ({
  plugins: [
    vue(),
    <%_ if (config.includeTailwind) { _%>
    tailwindcss(),
    <%_ } _%>
    vueDevTools()
  ],

  resolve: {
    <%_ if (config.includeAtAliases) { _%>
    alias: [
      {
        find: '@',
        replacement: '@',
        customResolver(source, importer, options) {
          let target = playgroundSrc

          // If the importer is inside librarySrc we resolve @ to that path
          if (importer && relative(importer, librarySrc).split(pathSeparator).every(p => p === '..')) {
            target = librarySrc
          }

          const filePath = source.replace(/^@\//, target)

          return this.resolve(filePath, importer, options)
        }
      }, {
        find: '<%- config.scopedPackageName %>',
        replacement: librarySrc
      }
    ]
    <%_ } else { _%>
    alias: {
      <%- config.packageNameAsObjectKey %>: fileURLToPath(new URL('../<%- config.mainPackageDirName %>/src/', import.meta.url))
    }
    <%_ } _%>
  },

  define: {
    __DEV__: mode !== 'production',
    <%_ if (config.includeTestVariable) { _%>
    __TEST__: false
    <%_ } _%>
  }
}))
